[
	{
		"id": "8e3e28ed-2b71-4900-a6eb-838e2c48fec2",
		"title": "2022年の抱負",
		"body": "## 2021年にやったこと\n\n### スクラムマスターを5ヵ月間経験\n* メンバーだけでは手が回りきらない所をあれこれサポートしていくうちに、段々とふりかえりやプランニングで意見が出にくくなってしまいチームを主体的な行動に導くことができなかったと思う\n  * [エンジニアリング組織論への招待](https://www.amazon.co.jp/dp/B079TLW41L/ref=cm_sw_r_tw_dp_06EC7WVQN834F9PAYAKS)を読んで、1on1で個人をメンタリングできるようになってないとチームのメンタリングは難しいということを学んだので、まずは1on1で個人のメンタリングのテクニックを磨きたい\n\n### 引き続きフロントエンドエンジニア\n* テックタッチ入社以降やっているフロントエンドエンジニアを続けて3年と9カ月が経過した\n* 2020年の後半からReactを触り始め、テストコードを書きながらの通常の機能追加は難なくこなせるようになった\n  * 92thunder.dev の開発を続け、ここで実験したことを業務にも活かしたい\n* チームの開発体制が変わって、エンジニアも積極的にデザイン（仕様策定）に関わることになり、よりユーザのことを考えながら開発に携わるようになった\n  * 元々仕様の検討に入りたかった & 将来的にPdMのキャリアも経験したい自分としてはやりやすい環境になった\n* まだ仕事が粗いことがあって品質や開発速度で迷惑をかけることがあった\n  * もっと丁寧な開発ができるはずなので、1つ1つの業務を丁寧に積み重ねていきたい\n\n## 将来のビジョン\n### 5年\n* スタートアップの成長に主体的に携わってどこでも通用する力を持つ\n* 北海道で立派な家を持つ\n* 起業して自分らしい会社を作って楽しく働く\n\n### 3年\n* Webエンジニアとして一人で何でも出来る力をつける\n* プロダクトマネージャーになって、ビジネスへの理解を深めプロダクトを成長させる\n* テックタッチの上場に主体的に貢献している\n\n## 2022年の目標\n* 仕事に集中して上質なアウトプットを出し続けてプロダクトの成長に貢献する\n* 急激に人数が増えてきた会社に対して、組織全体の動きが良くなる行動を主体的にやっていく\n* インプットを増やして成長するため、毎週ブログを書く、または 92thunder.dev 自体を改善する",
		"published": true,
		"published_at": "2022-01-15 20:12:00"
	},
	{
		"id": "e276c394-ea27-4686-8d8f-0cf82dd1bea0",
		"title": "本ブログのバックエンドをGo + MySQLで作った",
		"body": "前回に続き、このブログのデータをFirebaseから自前のMySQLに引っ越ししたのでそれを編集するためのバックエンドAPIを作った。その中で学んだことをまとめておく。\n\n---\n\n## やったこと\n* もともとFirabase storeを使っていた[ブログのエディターアプリ](https://github.com/92thunder/blog-editor)を `https://92thunder.dev/api`を使うよう変更\n* nginxで `/api` を http://localhost:1323 にプロキシする\n* バックエンドAPIをGo言語でEchoというフレームワークを使って実装\n* ブログデータをFirestoreからMySQLに愛をこめて手動引っ越し\n\n## ブログエディターの変更\n* 保存処理はRepositoryにまとめておいたので影響箇所を少なく抑えられた\n* FirestoreからMySQLのフォーマットに合わせた日付の型に変更した\n  * JSは日付のフォーマット面倒\n* APIクライアントライブラリにkyを使ったがとてもシンプルで良さげだった\n  * 後からapiClientにheaderの設定が出来ないなど不便なところもあるのかもしれない\n\n## バックエンドAPIの認証\n誰にでもブログをいじれると困るので認証を入れた。今回は[こちらを参考](https://zenn.dev/lapi/articles/2021-06-04-otp_tutorial)にさせてもらってワンタイムパスワードを使った認証にした。ワンタイムパスワードってOTPって略すんだね。\n\nサーバ起動時にOTPのシークレット情報が無ければ、以下のコードでシークレット情報を生成するよう設定した。起動後にシークレット情報を多要素認証アプリに食わせることで簡単にOTPを実装することができた。\n```go\nkey, err := totp.Generate(totp.GenerateOpts{\n\tIssuer:      \"92thunder.dev\",\n\tAccountName: \"r.kunisada661@gmail.com\",\n})\nif err != nil {\n\tlog.Fatal(err)\n}\nSaveSecret(key.Secret(), key.AccountName(), key.URL())\n```\n\nサインイン時に発行されるsession_idを使って認証後のAPIを使えるか判定するよう実装した。\n\n## Echo\n[Echo](https://echo.labstack.com/)はSinatraとかExpressのような、シンプルなWebフレームワークだった。個人的には慣れない言語でjsonからのデータバインディングしたくないと思ってたのでそれがあるだけで十分な機能だった。\n```go\n// CORSの設定\ne.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\tAllowOrigins: []string{\"http://localhost:3000\"},\n\tAllowMethods: []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete},\n})\n\n// 保存リクエスト\nfunc savePost(c echo.Context) error {\n\tp := new(Post)\n\tif err := c.Bind(p); err != nil {\n\t\treturn err\n\t}\n\tpost, err := SavePost(p)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusBadRequest, err)\n\t}\n\treturn c.JSON(http.StatusOK, post)\n}\n```\n\n## nginxの設定\nnginxの設定はVPSを使った自前構成にしてから一番学びがある。\n\n \n```nginx\n# /etc/nginx/sites-available/default\nserver {\n  # _ を含むヘッダーがある場合に必要\n  ignore_invalid_headers off;\n\n  # 前方一致にしておかないと正規表現で記述していたnext.js用の設定が勝ってしまっていた\n  location ^~ /api/ {\n    # 末尾に / がないと、 http://127.0.0.1:1323/api にプロキシしてしまう\n    proxy_pass http://127.0.0.1:1323/;\n    # これが無いとheaderが削られてしまう\n    proxy_set_header Host $host;\n  }\n}\n```\n\n## SystemdでGo APIを起動する\nGo APIはデーモン化して起動する必要があるのでSystemdを使って起動するよう設定した。このあたりはISUCONの勉強で学んだことを活かせた！\n```service\n# /etc/systemd/system/blog-api.service\n[Unit]\nDescription = blog-api\n\n[Service]\nUser = blog\nType = simple\nExecStart = /home/blog/blog/backend/main\nWorkingDirectory = /home/blog/blog/backend\nRestart = always\n\n[Install]\nWantedBy = multi-user.target\n```\n\n```bash\n# systemctlに追加したserviceファイルを認識させる\nsystemctl daemon-reload\n\n# マシンが再起動しても自動実行させる\nsudo systemctl enable blog-api\n\n# serviceを開始する\nsudo systemctl start blog-api\n\n# ステータス確認\nsystemctl status blog-api -l\n```\n\n---\n（´-`）「正月休み+3連休でブログ一通り動くところまで完成できたので良い1年の始まりだなぁ」",
		"published": true,
		"published_at": "2022-01-11 07:40:00"
	},
	{
		"id": "8b00a36d-4085-4be6-b028-974a4e69bfbc",
		"title": "本ブログをReact SPAからNext.jsにリプレイスした",
		"body": "さすがにSPAだとSEO対策やOGP対応できないのでNext.jsに移行した。\n\n---\n\n## やったこと\n* とりあえず作ったCreate React App製のこのブログをNext.jsに移行した\n* SSGとしてビルドしてVPS上にデプロイしnginx経由でアクセスできるようにした\n* このブログアプリはDBの読み込みのみで、ブログの編集に関してはこのアプリではやらず、別のエディターとAPIを用意する（後で書く）\n\n## Next.js \n### getStaticPropsはDBに直接アクセスすればいい\n`/pages/api` にDBアクセスするAPIを書いて `/pages` のgesStaticPropsからAPIを呼び出すのかと思ってたが、getStaticProps内で直接DBアクセスすることでデータを取得できた。APIという依存が1つ減っただけでかなりすっきりした実感がある。\n\n### getStaticPathsで動的なルーティングを設定する\nどうやって `posts/[id].html` のようなルーティングができるようになるのかと不思議に思ってたら `export getStaticPaths` することで対応できた。\n```ts\nexport async function getStaticPaths() {\n  const results = JSON.parse(JSON.stringify(await query('SELECT * FROM post WHERE published = true')))\n  const paths = results.map((post: any) => `/posts/${post.id}`)\n  return { paths, fallback: false }\n}\n```\n\n### Serverless MySQL\n今回、データはfirestoreからMySQLを使うことにしたので、DBへのアクセスが必要になった。Next.jsからのMySQLクライアントラッパーで一番使われてそうだったので [serverless-mysql](https://github.com/jeremydaly/serverless-mysql) を使った。\n\nNext.jsのサンプルを参考に、薄いwrapperを作成して使いやすくした。\nhttps://github.com/92thunder/blog/blob/main/blog/libs/db.ts\n\n### Material UI 5への対応\nMaterial UIから4から5へ変わっていたがpackage名の変更くらいしか影響がなかった\n\n### SSGのビルド\nbuildしてからexportすることで静的なHTMLを生成することができる。2GBのVPSだとビルド失敗することあってわりと厳しめ。\n```json\n  \"scripts\": {\n    ...\n      \"build\": \"next build && next export\",\n    ...\n  }\n```\n\n## nginxの設定\nSPA用の設定だとだめだったので、ここを参考にしてpathに応じてNext.jsのルーティングに対応したHTMLを返すように設定した\n\nhttps://gist.github.com/zackad/7dd46be60df4fe7d1010a0fcf33d1afc\n\n## 今後やりたいこと\n* ブログのエディターにPublishボタンを用意しておき、API経由でSSGを再ビルド\n* スタイルがうまくいってないところあるので改善する。。。",
		"published": true,
		"published_at": "2022-01-09 19:35:00"
	},
	{
		"id": "eecb02a5-871c-48ff-acb0-844b9d52d6c5",
		"title": "本ブログをVPSに引っ越しする",
		"body": "ISUCONを経て、サーバを生で運用する経験が欲しくなったのでConoha VPSに移行してみる。\n\n---\n\n## Intro\n* FirebaseにホスティングしているこのページをConoha VPSに引っ越す。\n\n## VPSを提供業者の選択\n* AWS LightSailもありかと思ったが料金が少し高そうだったので有名どころのさくらかConohaで選ぶ\n* Conohaのほうがイメージのバックアップが強そうだったのでConoha使ってみる\n\n## Conoha VPSのサーバ\n* なるべく安く済ませたかったが、無難にメモリ2GBのサーバを選択\n* 後から気付いたがVPSではなくWINGというやつを選んでもよかったかも\n\n## React SPAのビルド\n* ビルド済みの成果物をアップロードする方法でもよかったが、面倒だったので `git clone` してビルドする方法に\n\n### Node.jsのインストール\n* nvmで入れた\nhttps://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-20-04-ja\n\n## nginxの設定\n`/etc/nginx/sites-available/default` を書き換えた。\n```nginx\n  # appの配置場所\n  root /home/blog/blog/frontend/build;\n  # 後述のTLS対応のため\n  server_name 92thunder.dev;\n  # SPAなので /about など任意のページにアクセスがきても404にならないように\n  location / {\n    try_files $uri /index.html\n  }\n```\n\nこの時点で http://92thunder.dev にアクセスしても https に飛ばされて動かないなーと悩んでたけど devドメインだからHSTSのヘッダーが強制されてしまうからだった。\n\n\n## HTTPS化対応\nCertbotがLet's Encryptをよしなにインストールしてくれるらしい\n\nhttps://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04-ja\n\nnginxの設定ファイル見たら勝手に書いてくれてた。すんごい。\n```nginx\n    listen [::]:443 ssl ipv6only=on; # managed by Certbot\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/92thunder.dev/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/92thunder.dev/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n```\n無事に https://92thunder.dev に設定された！\n\n## Outro\n* やろうと思って何ヵ月も放置したけどやってみると簡単にサーバにデプロイできた。\n* [DigitalOcean](https://www.digitalocean.com/)先生が日本語でも読めるドキュメント残してくれてて最高に助かった。救われる人多いはず。\n* 引き続きバックエンドAPIやDBも脱Firabaseする。",
		"published": true,
		"published_at": "2021-11-28 15:00:00"
	},
	{
		"id": "e93055db-57d0-4072-ae28-220f5200df6a",
		"title": "ISUCON10予選の過去問練習-2 App-DBを別インスタンスに",
		"body": "まずは過去問の講評に書いてあることを出来るようにならねばということで別インスタンスのDBが動作するよう変更してみる。去年挑んだのと同じ問題だが力になれなかった悔しさを胸に。。\n\n---\n\n今回の目標は[ISUCON10予選の講評](https://isucon.net/archives/55025156.html)に書かれているこいつができるようになること。\n> estate と chair で DB を別サーバに分ける\n![](https://livedoor.blogimg.jp/isucon/imgs/b/6/b6873eb6-s.png)\n\n## AWSインスタンス２つ目起動\n前回同様 m3.medium のインスタンスを起動。同一VPC内に起動しているようなので繋がるはず。\nMySQLのクライアントが接続できるように、ポート3306を公開。\n\n## Dataの用意\n[前回](https://92thunder.dev/posts/da8906ea-42b1-4940-8d53-cc1522645250) でやった手順で同様に、initial-data は別のインスタンスで用意する必要があった。同じように `make` で初期データをDBに登録する。本番は初期データも入っている状態だと思うのでこの手順は不要だと思われる。\n\n## pingが通らない\n調べた結果、EC2インスタンスにpingを通したければICMPをセキュリティグループに設定する必要があるらしい。  \nhttps://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/security-group-rules-reference.html#sg-rules-ping\n\n## 接続先変更\nDBインスタンス\n* sudo systemctl stop isuumo.go.service\n\nAppインスタンス\n* env.sh を編集してMYSQL_HOSTをインスタンス2のプライベートIPに変更\n* sudo systemctl stop mysql.service\n* sudo systemctl restart isuumo.go.service\n\nWebAppをブラウザから確認。API動いてない。。。benchも失敗する。。。\n\n## MySQLの外部公開\n参考にした。  \n https://qiita.com/2019Shun/items/34d44d63b00d086db51a\n\n/etc/mysql/mysql.conf.d/mysqld.cnf を編集\n```\nbind-address                    = 0.0.0.0\n```\n\n## MySQLのユーザを外から接続できるよう変更\n一緒にISUCON参加予定のメンバーから教えてもらった。これでISUCONユーザがlocalhost以外からでも接続できるようになる。\n```\nGRANT ALL PRIVILEGES ON *.* TO 'isucon'@'%' WITH GRANT OPTION;\nselect user, host from mysql.user;\n```\nこれで再起動して動くようになった。\n\n## benchちょっと改善\n`{\"pass\":true,\"score\":191,\"messages\":[],\"reason\":\"OK\",\"language\":\"nodejs\"}`  \n↓  \n`{\"pass\":true,\"score\":232,\"messages\":[],\"reason\":\"OK\",\"language\":\"nodejs\"}`\n\nとりあえず App と DB　のインスタンスを分離できた。chair, estateを分離するまではできなかったが、同様の手順でやって、App に複数 MySQL を接続できるように変更すればできるだろう。",
		"published": true,
		"published_at": "2021-07-30 15:00:00"
	},
	{
		"id": "ffc4d259-7746-4fa7-b15b-a2bf221dfccd",
		"title": "ISUCON10予選の過去問練習-1 AWSで環境構築",
		"body": "ISUCONの過去問(isucon10-qualify)をAWS上で構築するのに手こずったのでメモ\n\n---\n\n@matsuu さんがAWSのIAMを用意してくれている。神。\nhttps://github.com/matsuu/aws-isucon\n\n今回はISUCON10予選を練習するのでEC2インスタンス起動から ami-03bbe60df80bdccc0 を検索して、何も考えずt2.microで起動すると厳しかったのでm3.mediumで起動。起動しっぱなしなだと結構高そうなのでこまめに停止せねば。\n\n他のメンバーにもアクセスしてほしいので新規キーペアを作成し、SSHでアクセス。\n```bash\nssh -i \"isucon11.pem\" ubuntu@ec2-XXXXXXX.ap-northeast-1.compute.amazonaws.com\n```\n### initial-data設定\n\n書いてある通り順に実行\n```bash\npip3 install -r requirements.txt\ngo get github.com/orisano/wayt\nmake\n```\ndocker-composeが入っていないみたいだったのでインストール\n```bash\nsudo apt install docker-compose\n# isuconユーザではdockerの権限がなかったのでgroupに追加\nsudo gpasswd -a $USER docker\nexit\nsudo -i -u isucon\n```\nmysqlのserviceが起動しているため停止\n```bash\nsudo systemctl stop mysql.service\n```\nwayt http -u \"http://localhost:1323/api/estate/search/condition\" から進まなかったので一度goのwebappを起動\n```bash\ncd webapp\nmake isuumo/go\n```\nもう一度実行したらいけた\n```bash\nmake\n```\n\n### 実装をnodejsに切り替え\nnodejsで起動\n```bash\nsudo systemctl disable isuumo.go.service\nsudo systemctl enable isuumo.nodejs.service\n```\n\n### ec2-XXXXXXX.ap-northeast-1.compute.amazonaws.com で起動を確認\nセキュリティグループを編集しポート80番を公開\n\nisuumo動いてる。ヨシ！\n\n### bench動かしてみる\nいろいろあったがなんとか動いたぞ。\n```bash\n./bench -target-url http://localhost:1323\n2021/07/25 02:56:14 bench.go:78: === initialize ===\n2021/07/25 02:56:19 bench.go:90: === verify ===\n2021/07/25 02:56:23 bench.go:100: === validation ===\n2021/07/25 02:57:23 bench.go:102: 最終的な負荷レベル: 0\n{\"pass\":true,\"score\":189,\"messages\":[],\"reason\":\"OK\",\"language\":\"nodejs\"}\n```\n\n\n",
		"published": true,
		"published_at": "2021-07-24 15:00:00"
	},
	{
		"id": "f62bdd28-27ec-48b7-8a7c-9d66efb1ac81",
		"title": "firebase storage で ファイルをパブリックアクセス可能にする",
		"body": "なかなか実際の方法に辿り着けなかったのでメモ。\n\n以下の手順通りに、Google Cloud Platform上で allUsers に対して Storage オブジェクト閲覧者 を設定する。\n\nhttps://cloud.google.com/storage/docs/access-control/making-data-public?hl=ja\n\n\nこのURLからアクセスできる\n\n`https://storage.googleapis.com/[bucket.appspot.com]/[path]`",
		"published": true,
		"published_at": "2021-04-08 15:00:00"
	},
	{
		"id": "05fedd45-c26b-488a-a7dd-59f0368ca256",
		"title": "firestore で特定ユーザのみ書き込み可能にする",
		"body": "ブログを作るにあたって、自分のみ書き込みできるようにしたかったのでその方法をメモ。\n\n---\n\nAuthentication を使ってログイン後、Console からUIDを確認し、条件を設定する。\n\n```js\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read;\n      allow write: if isValidUser();\n    }\n  }\n  function isValidUser() {\n    return request.auth.uid == 'UIDを設定'\n  }\n}\n```\n\n",
		"published": true,
		"published_at": "2021-04-02 15:00:00"
	},
	{
		"id": "94cb03ba-0d06-4c08-b6af-e99b099616f4",
		"title": "WSLでsystemctlが使えない",
		"body": "systemctlを使ってredis-serverを起動させようとすると `System has not been booted with systemd as init system (PID 1). Can't operate.` と言われて怒られてしまう。\n\n---\n\nここに書いてある通り、今のところ WSL2 では systemd が使えないらしい。\n[https://github.com/MicrosoftDocs/WSL/issues/457#issuecomment-511495846](https://github.com/MicrosoftDocs/WSL/issues/457#issuecomment-511495846)\n\n頑張れば使えるみたいだが諦めた。\n\n[https://qiita.com/matarillo/items/f036a9561a4839275e5f](https://qiita.com/matarillo/items/f036a9561a4839275e5f)\n\n普通に `sudo /etc/init.d/redis-server start` で起動することができた。\n\nsystemdがProcess ID 1じゃないと起動しないってどういう経緯の制限なんだ…。",
		"published": true,
		"published_at": "2020-09-11 15:00:00"
	},
	{
		"id": "cfc0f11b-1a12-4f1a-8a64-44e699868e69",
		"title": "React & TypeScriptのサンプルコードをどこに書くか",
		"body": "JSFiddleやCodePenだとTypeScriptのサポート受けられないのでサクッといい感じに書けてブログなどで共有できるものが欲しい。StackBlitzとCodeSandboxの２択っぽいのでその２つについて調べたことをまとめておく。\n\n---\n\n## StackBlitz\n\n- React TypeScriptのサンプルプロジェクト\n    - [https://stackblitz.com/edit/react-ts-envuum](https://stackblitz.com/edit/react-ts-envuum)\n- 無料プランでPublicプロジェクトは無制限 & GithubのPublic Repoとも接続できる\n- 見た目はほぼVisual Studio Codeと同じだがExtensionの追加はまだできなさそう\n    - [https://github.com/stackblitz/core/issues/3](https://github.com/stackblitz/core/issues/3)\n    - 個人的にVim Pluginが無いのはちょっとマイナスポイント\n- 設定は VS Code と同じ方法でできるので拡張いらないくらいの用途なら問題なさそう\n\n## CodeSandbox\n\n- React TypeScriptのTemplate\n    - [https://codesandbox.io/s/react-ts-template-rlhgd](https://codesandbox.io/s/react-ts-template-rlhgd?file=/src/App.tsx)\n- Preferences > Appearance からVim extensionを有効にできる\n- こちらもpublicは無料だがprivateは有料プラン\n- Live機能がついており、Classroom modeと共同編集モードが選べるようになっていてちょっとした共有にはとても便利そう\n\n## まとめ\n\n- 現段階では Vimサポートもある CodeSandbox 一択かな\n- styled-components など CSS in JS なものだとうまくエディターに表示されないんだろうけどTypeScript × Reactの機能を試すにはこれらで十分そう\n\n## おまけ\n\nVisual Studio Codespaces\n\n- [https://azure.microsoft.com/ja-jp/pricing/details/visual-studio-online/](https://azure.microsoft.com/ja-jp/pricing/details/visual-studio-online/)\n- Azureと契約する必要あるので避けたくなってしまうが思っていたほど価格は高くなさそう",
		"published": false,
		"published_at": "2020-08-29 15:00:00"
	},
	{
		"id": "21db64c4-9fb7-41c2-a081-cbdbac7323eb",
		"title": "Notion Blogで There are no posts yet になる",
		"body": "以前にもあったNOTION_TOKENの期限切れ？かなと思っていろいろ試したがなかなかなおらなかったのでメモ\n\n---\n\nVercel の settings/environment-variables で NOTION_TOKEN, BLOG_INDEX_ID を設定しなおしてもだめで、最終的には now CLI から設定値の名前を-つなぎで設定しなおしたら修正できた様子（本当か？）\n\n```bash\nnow login\nnow secrets add notion-token [NOTION_TOKEN]\nnow secrets add blog-index-id [BLOG_INDEX_ID] \n```",
		"published": true,
		"published_at": "2020-08-15 15:00:00"
	},
	{
		"id": "cb6168e7-86a3-4c43-a257-594a89681e95",
		"title": "[React] useContextの使い方",
		"body": "Reactの使い方シリーズ（新）\n\nReactのContextをhooksとして扱うuseContextをどうやって使うのかメモ。\n\n---\n\n## Context\n\n下位のコンポーネントにPropsではなくContextを経由してデータを渡すことができる。コンテキストって読みたくなるけどReactのドキュメントではコンテクスト。\n\n[コンテクスト - React](https://ja.reactjs.org/docs/context.html)\n\n## 使い方\n\nReact.createContextで作成したContextをProviderで任意のコンポーネントツリーから使用できる\n\nSettingsをContextとして共有する.tsx\n\n```tsx\n// React.createContextでContextを作る\n// changeThemeなどの振る舞いもここで定義可能\nconst SettingsContext = React.createContext<{\n  theme: \"light\" | \"dark\"\n  language: \"ja\"\n}>({ theme: \"light\", language: \"ja\" })\n\n// React.useContextでcontextを取得する\nconst useSettingsContext = () => {\n  // そのままuseContextを各コンポーネントから使うだけでは値の変化を追えない\n  const context = React.useContext(SettingsContext)\n  if (!context)\n    throw new Error(\"useSettingsContext must be used within SettingsProvider.\")\n  return context\n}\n\n// Context.Providerを使ったコンポーネントでProviderを作り、Contextで共有するvalueを使う\n// 直接SettingsContext.Providerを使う方法でもよいが、この方法では初期値をSettingsProviderで設定している\nconst SettingsProvider = (props) => {\n  // パフォーマンス向上のためメモ化しておく\n  const value = React.useMemo(() => ({\n    theme: \"dark\",\n    language: \"ja\"\n  }))\n  return <SettingsContext.Provider value={value} {...props} />\n}\n\nconst Settings = () => {\n  // SettingsProviderの中のコンポーネントではuseSettingsContextで設定値を取得できる\n  const settings = useSettingsContext()\n  const lang = settings.language\n  const theme = settings.theme\n  return (\n    <>\n      <p>{lang}</p>\n      <p>{theme}</p>\n    </>\n  )\n}\n\nconst App = () => {\n  return (\n    <SettingsProvider>\n      <h1>React useContext demo</h1>\n      <Settings />\n    </SettingsProvider>\n  )\n}\n\nReactDOM.render(<App />, document.querySelector(\".app\"))\n```",
		"published": true,
		"published_at": "2020-08-01 15:00:00"
	},
	{
		"id": "e67a0680-56f1-46ae-b33a-2a3b74ad0e5a",
		"title": "スタートアップに転職して2年が経った",
		"body": "2018年4月からスタートアップに転職し、Webフロントエンドの開発を担当している。現職に入社してからの日々のことと今の気持ちを書き残す。\n\n## なぜスタートアップに転職したか\n\n過去のブログに真面目な事を書いていると思うが、自分では恥ずかしくて読めない。\nhttps://92thunder.hatenablog.com/entry/2018/05/18/230619\n\n## それから2年\n\n創業1ヶ月後に入社した会社は、当時共同創業者2名と自分の3人だけだった。シェアオフィスの一部屋を借り、机3つとホワイトボードしかない部屋で最初のリリースに向けて開発を進める日々だった。\n\nそれから2年が経ち、社員数は20名を超え、5億円のシリーズA資金調達を実施できるまでに成長した。\n\nプロダクトのアイデアに恵まれたのが、なにより幸運だったと思う。最初のプロダクトのアイデアを一緒に検討することができたのはとても良い経験になった。自分自身が欲しいと思うプロダクトの形を目指して開発できており、同じくこのアイデアに賛同して入社を決めてくれる人も少なくない。展示会で製品デモをする時には、毎回お客さんのウケが良く、みんなに必要とされている製品なんだなと感じる。\n\nプロダクトの性質上、ブラウザのWeb APIには必然的に詳しくなった。0→1だけでなく1→10, 100に長期開発していく中で、スピードを落とさずに開発を進めていくことが求められるため、設計の技術も身につけることができている。最初は基本的に自分だけで考えて進めていたが、今は相談相手も多いので、最善の開発をチームで深く考えながら進められている。最近では開発チームのテックブログも自分主導で立ち上げ、開発以外でもチームの醸成を感じている。\n\n人数が増えると組織の形も変わる。個々人が得意分野で力を発揮し、全員で会社を成長させている感じがして居心地がいい。組織づくりってどう進んでいくんだろう？なんて思ってたが、目の前で行われている1つ1つの話し合いが組織づくりなんだと気づく事もあった。\n\nBtoB向けに提供しているため、不具合調査や製品デモでSalesやCSチームと客先に同行することもある。泥臭く不具合の原因を調査し1つずつ潰していくこともあるが、CSと連携してクイックに対応できているのでストレスは特にない。実際にお客さんの反応を見て、機能開発の優先順位決めをしたり、ユーザの顔を思い浮かべながらUIの議論をしていくことも多い。\n\nBizチームの状況はSlack上でなんとなく把握している他にも、Customer Journey Mapを元に問題点の洗い出しを行い、どんな仕組みづくりが必要かという話にも参加できているので、開発側だけでなくBiz側の成長も断片的には見ることができていると思う。\n\n普段はスタートアップだからどうこうということを強く意識することはなく、開発だけに集中させてもらっている。スタートアップでやっている実感が湧くのはやはり資金調達のタイミングだ。資金調達実施後には、自分たちの現在地を認識し、前の調達からこれだけ成長できていて、次回の調達ラウンドではN倍にも会社を成長させる必要があるという確認をする。\n\n## 今後\n\n現職に入社してからの日々のことを書き殴ったが入社前の思惑通り、自分は今、東京で、スタートアップで、濃い経験ができていると思う。自分が書いたから言うけど、みんな転職エントリばっかり書かないでこういう振り返りをちゃんとしていけよなと思う。引き続き、もっと価値あるプロダクトを作りつつ、会社とともに高みを目指したい。\n",
		"published": true,
		"published_at": "2020-07-19 06:00:00"
	},
	{
		"id": "ed3d508c-a7cb-4e52-8a0c-2d80f85f83e8",
		"title": "Nxについて調べてみた",
		"body": "仕事でReactと一緒に使い始めるのでどんなことができるのか調査したことをまとめておく。最高っぽい。 \n\n---\n\n## Nxとは\n\n[https://nx.dev/](https://nx.dev/)\n\n- lernaやyarn workspaceのようなJSのmonorepo支援ツールの一つ\n- CLIやeditor pluginによってdev experienceが向上する\n- コード共有の制御とコード生成ができる\n- コードの変更による影響範囲を把握しておくことで、コミットの度に必要なものだけをビルド＆テストできる\n- キャッシュを使うことで全てのコードをスクラッチビルド、テストしないことで時間を大幅に削減する\n- TypeScript, React, Angular, Cypress, Jest, Prettier, Nest.js, Next.js, Storybook, Ionixなどをサポートしておりツールに関わらず一貫したDXを提供する\n- 元はAngularからサポートからReactに派生しているのでAngularのCLIの影響を受けていそう\n\n## 使い方\n\n普段よく使うコマンド \n\n### `nx affected:test --base=origin/master`\n\n- origin/masterとの差分を見て影響のある部分のみテストする\n- build, lintなどもaffected:をつかて影響範囲のみ実行できる\n\n### `nx run project:target`\n\n- projectはpackage名でtargetはコマンド（ `nx run myapp:build` のような使い方)\n- build, test, lintなどは `nx build myapp` でも同じことができる\n- 各パッケージでpackage.jsonのscriptsを書くかわりに、workspace.jsonに定義されているコマンドを実行する\n\n### `nx generate <collection:schematic>`\n\n- schematicから新しいpackageを生成する\n- 後述のNx Consoleを使うことでschematic名やオプションを覚える必要はなくなる\n\n### `nx dep-graph`\n\n- 各package間の依存グラフを生成する\n\n### Nx Console\n\n[https://nx.dev/react/cli/console](https://nx.dev/react/cli/console)\n\n- Nxを専用UIでサポートするVS Code拡張\n- Schematic（generateコマンドなどの設定値を定義したやつのこと）のカスタム要素を一覧し見やすくしてくれる\n- フラグやパスの入力を補完してくれる\n- 適切なNxの拡張を見つけやすくする\n\n## Nx Cloud\n\n- Nxを使ったサービスで、ビルドやテストのキャッシュをクラウドに保存しておくことで、メンバーはローカルで0からビルドしなくても、そのキャッシュをダウンロードすることでより高速なDXを得られるというものらしい\n\n> 10x開発者は神話かもしれないが、10xビルドパフォーマンスは現実です\n(10x Developers May Be a Myth, but 10x Build Performance is Real)\n> \n\nなるほど",
		"published": true,
		"published_at": "2020-07-11 15:00:00"
	},
	{
		"id": "2c597b8e-52e1-46e3-a069-27ec5dfb3c01",
		"title": "Notion Blogが途中までしか表示されない",
		"body": "ここでlimitが100に設定されていた\n\n[https://github.com/ijjk/notion-blog/blob/ec8ca69795dec252074ec31da94868e0b4b6130a/src/lib/notion/getPageData.ts#L22](https://github.com/ijjk/notion-blog/blob/ec8ca69795dec252074ec31da94868e0b4b6130a/src/lib/notion/getPageData.ts#L22)\n\n1000に変えてみたが今の所問題なさそう\n\n---\n\nついでに調べたこと\n\n- [https://notion-blog.now.sh/](https://notion-blog.now.sh/) に従ってブログを作るとnotion-blogのリポジトリをimportして作ることになるので、本家の更新に追従しようとすると、rootのコミットも別物になっているため、 `git merge --allow-unrelated-histories` した結果コンフリクトだらけで面倒になる\n    - 最新のNext.jsに更新したかったがコンフリクトが多かったため時間あるときに頑張る\n- 現状のNotion Blogは公式のAPIを使っているわけではなく、Notionで使っているAPIと同様のものを呼び出しているだけの様子\n    - APIが完成したらちゃんとしたドキュメントができてNotion Blogでも使われるようになるんだろう\n    - [https://github.com/ijjk/notion-blog/issues/19](https://github.com/ijjk/notion-blog/issues/19)",
		"published": true,
		"published_at": "2020-06-06 15:00:00"
	},
	{
		"id": "c056ba5c-f5ca-47e5-8c58-c0cd6e62de14",
		"title": "ざっくりわかるドメイン駆動設計",
		"body": "2020/5/29に会社の勉強会で発表した内容をブログとしてまとめなおす。\n\n---\n\n## 経緯\n\n- 最近ちゃんと勉強しようと思ってnrslibさんのドメイン駆動設計入門を読み始めた\n    - [https://twitter.com/nrslib](https://twitter.com/nrslib)\n    - [https://www.amazon.co.jp/gp/product/479815072X/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=jikyu860yen-22&creative=1211&linkCode=as2&creativeASIN=479815072X&linkId=d6c9781814cfce27eed2943ef5c79524](https://www.amazon.co.jp/gp/product/479815072X/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=jikyu860yen-22&creative=1211&linkCode=as2&creativeASIN=479815072X&linkId=d6c9781814cfce27eed2943ef5c79524)\n    \n    [nrs](https://twitter.com/nrslib)\n    \n    [ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本](https://amzn.to/2XIby0i)\n    \n- 2月に参加したObject Oriented ConferenceでDDDに興味を持ち始めた\n- 2020年5月29日時点の知識でドメイン駆動について会社の勉強会で発表した内容をブログとしてまとめる\n\n## ドメイン駆動設計=DDDとは\n\n松岡さんのブログよりDomainlanguage.comの引用\n\n[ドメイン駆動設計の定義についてEric Evansはなんと言っているのか[DDD] - little hands' lab](https://little-hands.hatenablog.com/entry/2017/09/27/014403)\n\n1. **ドメインの中核となる複雑さと機会に焦点を当てる**\n    - これがもっとも重要な考え方。下はドメイン駆動設計で用いられる代表的なテクニック。\n2. ドメイン専門家とソフトウェア専門家のコラボレーションでモデルを探求する\n3. 明示的にそれらのモデルを表現するソフトウェアを書く\n4. 境界付けられたコンテキストの中のユビキタス言語で話す\n\n### ドメインとは\n\n![](https://lh3.googleusercontent.com/pw/AM-JKLXzp3p3sarDH9SnogwnSf4U62OtumPSWtfrQaG1_FvN2T76O9Hb-ab-bQSJ48ljgfYAjlF6jSdPkHvLuxSfT19d7xs6tVhoRgD9Bb99EEogjmfvK4_E9Oxr7KX-lurwpOF1SSHKGCr48ZmBfz58ScJQ=w722-h207-no?authuser=0)\n\nよくわからんけど領域が近そう🤔\n\n勤怠システムのドメイン（領域）にはこのような概念がある\n\n- 従業員\n- 勤務時間\n- 有給\n\nテックタッチだと\n\n- ガイド、ステップ\n\nソフトウェアの目的は問題の解決\n\n- **ドメインの概念を正確に理解し、問題の解決に役立つ知識をソフトウェアに反映することが重要**\n- ソフトウェアを開発する上で当たり前の行為とも言える\n\n**ドメイン駆動設計 = ドメインの知識に焦点を当てる設計手法**\n\n（なんでドメインって言うんだろうね…）\n\n## ドメインモデル、ドメインオブジェクトとは\n\n- ドメインモデル：概念を理解し、問題解決に役立つ知識を抽出したもの（モデリング）\n    - ガイド：操作方法を教えてくれる\n        - ガイドには複数ステップがある\n        - タイトルが何文字まで\n        - リダイレクト設定がある\n- ドメインオブジェクト：ドメインモデルをソフトウェアで動作するモジュールとして表現したもの\n\nドメイン駆動設計では、ドメインの概念・ドメインモデル・ドメインオブジェクトを行き来しながらドメインの理解・ドメインの実装を繰り返す\n\n## 戦略と戦術\n\n### 軍事用語の戦略と戦術\n\n戦略：戦いに勝つために兵力を総合的・効果的に運用する方法で、大局的・長期的な視点で策定する計画手段\n\n戦術：戦いに勝つための戦地での兵士の動かし方など、実行上の方策\n\n### DDDの戦略と戦術\n\n**戦略：ドメインを理解し、それをモデルに落とし込む**\n\n- ユビキタス言語\n- ドメインモデリング\n\n**戦術：具体的な実装パターン**\n\n- エンティティ\n- バリューオブジェクト\n- リポジトリ\n- アーキテクチャ\n\n## 軽量DDDとは\n\n- DDDの中で戦術のみ、実装パターンだけを取り入れる手法は軽量DDDと呼ばれている\n- 軽量DDDだけなら開発チームだけで完結可能\n- ネガティブに捉えると、DDDの本質はドメインに向き合うことなので戦略のほうが重要なのでこの状態はあまりよくない\n- ポジティブに捉えると、DDDの導入として形から入ることは重要　ドメインに向き合うきっかけになる\n\n## ユビキタス言語\n\nステークホルダー間で認識の齟齬や翻訳にコストをかけないために共通言語を使う\n\nユビキタス=いつでもどこにでも存在する\n\nIoTのことユビキタスコンピューティングって呼んでる時代あったよね\n\nドメインエキスパート「ユーザを登録する」\n\n- ドメインの言語で話す\n\n開発者「ユーザを新規保存する」\n\n- 開発寄りの言葉を選びがち\n\nドメインエキスパートの言葉をそのまま使うということではない。\n\nシステムにもドメインにも寄り添ってユビキタス言語を作っていく\n\n## モデリング\n\n一般的な昔ながらの方法\n\n- ユースケース図\n    - アクターから見たアプリケーションのユースケースを図にしたもの\n    - 一般的なUMLのユースケース図と同じ\n- ドメインモデル図\n    - クラス図の簡易版\n    - 代表的な属性だけ記述してメソッドは不要\n    - ドメイン知識（業務のルール・制約）を吹き出しで記述する\n    \n    [https://www.slideshare.net/koichiromatsuoka/202038](https://www.slideshare.net/koichiromatsuoka/202038)\n    \n\n最近はRDRA2.0という手法が流行っているみたい\n\n![](https://lh3.googleusercontent.com/pw/AM-JKLUbWCy4ax3xDMMAEewU5ncN2AsPG2Sn61x0e0Xn0iTwNq0rUbHqjKYxmr4wEkMnBJgQaBewoAD467u8rqX93RSq-rdLbh4KGoMoLnQ8LZxF4wjk3RqLuqdKb32fx8nMcKe9ItsSi_2a9zNAV6z_4ZvB=w767-h553-no?authuser=0)\n\n## ドメインオブジェクト\n\n### ValueObject　値オブジェクト\n\n- プログラミング言語に用意されているプリミティブな値をそのまま使うのではなく、システム固有の値を表すオブジェクトにしたもの\n- 使うことでドメインオブジェクトの語彙を増やすことができる\n- 例えば\n    - 氏名\n    - 電話番号\n    - ガイドタイトル\n\n```tsx\nclass FullName {\n\tconstructor(fistName: string, lastName: string) {\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n\n\tequals(fullName: FullName) {\n    return this.firstName === fullName.firstName && this.lastName === fullName.lastName\n  }\n}\n```\n\n- ValueObjectの性質\n    - 不変である\n        - changeNameのような操作はない\n    - 交換が可能である\n        - 属性を変化するときは再代入しなおすことで表現する\n    - 等価性によって比較される\n        - 全ての属性が同じである = 等価\n\n### Entity　エンティティ\n\n- 値オブジェクトもエンティティもドメインオブジェクトだが、大きな違いは同一性を持っているかどうか\n\n```tsx\nclass User {\n  id: string\n  fullName: FullName\n  \n  constructor(fullName: FullName) {\n\t\tthis.id = createId()\n    this.fullName = fullName\n  }\n\n  changeName(fullName: FullName) {\n    this.fullName = fullName\n\t\t// return new User(fullName)\n  }\n\n  equals(user: User) {\n    return this.id === user.id\n  }\n}\n```\n\n- Entityの性質\n    - 可変である（コードの書き方の好みによって違いそう）\n        - 値オブジェクトは不変だったがエンティティは属性が変わりうる\n    - 同じ属性であっても区別される\n        - 同姓同名の人がいるように、同じ属性をもっていても別の個体だと認識する必要がある\n    - 同一性を持つ\n        - ユーザ名が変わったとしても同じユーザとしてみなされる\n\n## リポジトリ\n\n- ドメインオブジェクトの永続化が責務\n- リポジトリとして永続化、復元を管理するだけでとてもシンプルなコードになる\n- 基本的にはfind, save, deleteの3関数になるパターンが多い\n- IUserRepositoryというインターフェイスを作っておくことで、IUserRepositoryに従ったUserMemoryRepositoryを作ればテストしやすくなる\n\n```tsx\nclass UserRepository implements IUserRepository{\n  find(name: string) {\n    // SELECT * FROM USERS WHERE name....\n  }\n  \n  save(user: User) {}\n  delete(user: User) {}\n}\n```\n\nなぜドメイン駆動でリポジトリが出てくる？\n\n- たしかにドメインとはちょっと離れた存在\n- ドメインオブジェクト単位でリポジトリを管理することでドメインがコードの中で際立つ\n    - ガイドの保存はGuideRepositoryでやってるはず\n    - Repositoryの中でガイドの保存部分を探して…\n\n## アプリケーションサービス\n\n- ドメインオブジェクトを協調させてユースケースを実現する\n- サービスは状態を持たない\n- 例\n    \n    ```tsx\n    class UserService {\n      repository: IUserRepository\n    \n    \tconstructor(repository: IUserRepository) {\n    \t  this.repository = repository  \n    \t}\n    \n    \tregister(name: string) {\n        // ユーザ名の制約に引っかかると例外を投げる\n    \t\tconst user = new User(name)\n    \n    \t\tif (await this.repository.find(name)) {\n    \t\t\tthrow new Error('重複してます')\n    \t\t}\n    \n    \t\tthis.repository.save(user)\n      }\n    }\n    ```\n    \n\n## アーキテクチャ\n\n- DDDでよく登場するアーキテクチャは３層＋ドメインの構成が基本\n    - Presentation(UI, Controller)\n    - Service(Usecase)\n    - Infrastructure (Repository, DB, API\n    - Domain\n- アーキテクチャの役目\n    - レイヤーわけしてどこに何を書くべきかという方針を定める\n    - ソフトウェア特有の事情からドメインオブジェクトを防衛する\n- これらのアーキテクチャがあるが共通点として、どれもドメインオブジェクトを防衛するための仕組みを考えている\n    - レイヤードアーキテクチャ\n    - ヘキサゴナルアーキテクチャ\n    - クリーンアーキテクチャ\n\n## 気持ち\n\n- 要件定義→仕様→設計→実装　⇒　ドメイン↔ドメインモデル↔コード　という変化\n    - それぞれの境界の継ぎ目をなくす\n    - 反復的に繰り返すことで洗練していく\n- DDDをやっていくには、全員でドメインに向き合う意思を統一し、やっていくための仕組みを作り、反復的に繰り返す必要がある\n- 全てはソフトウェアの発展性を良い状態で維持するため\n\n## 参考資料\n\n- [https://DomainLanguage.com](https://domainlanguage.com/)\n- [https://speakerdeck.com/hirodragon112/flyweight-ddd](https://speakerdeck.com/hirodragon112/flyweight-ddd)\n- [http://tlync.hateblo.jp/entry/2016/12/25/171648](http://tlync.hateblo.jp/entry/2016/12/25/171648)\n- [https://github.com/little-hands/ddd-q-and-a](https://github.com/little-hands/ddd-q-and-a)",
		"published": true,
		"published_at": "2020-05-30 06:00:00"
	},
	{
		"id": "2fde3d99-26d5-4a2c-bb09-724e5576adc8",
		"title": "Notion Blogを使った感想",
		"body": "人はどうして３日で書かなくなるとわかっていてもブログを立ち上げることをやめられないのか。\n\nNotionをヘッドレスCMSとして使えるNext.js製テンプレートができたということで早速試してみたので感想をまとめる。\n\n---\n\n## ブログのデプロイ\n\nブログのデプロイ自体はzeitアカウントを作ってGithub連携し、デプロイボタンを押してポチポチ進めていけば一瞬でブログが立ち上がる\n[https://github.com/ijjk/notion-blog#deploy-your-own](https://github.com/ijjk/notion-blog#deploy-your-own)\n\nここに上がっているのと同じものが出来上がる\n/blogのページにNotionで書いたPageが追加されていく\n[https://notion-blog.now.sh/](https://notion-blog.now.sh/)\n\n- Notion BlogではNext.jsのcanaryリリースを使ってSSGサポートなど導入予定の機能を使っている\n    - SSR(server-side rendering)に対してSSG(static-site generator)というらしい…\n- 雰囲気で押したデプロイボタンによってGitHubにクローン & ZEITにプロジェクト追加 & now.shにデプロイが行われて便利\n[https://zeit.co/docs/v2/more/deploy-button](https://zeit.co/docs/v2/more/deploy-button)\n    - Markdownにも対応しているのでGitHubのREADMEに置いとけばすぐに誰かのテンプレートをデプロイできる。よく考えられてる…\n- これはカスタマイズ後だが、たしかにスコアはいい感じ\n    \n    ![](https://lh3.googleusercontent.com/pw/AM-JKLVdVhzMAleYv6m0PUVBpuGRmaT_VwLRDO-wLmmz-FjTZrc-Mi12-UWe2g1LGUtyDcR2038gjDzBQmUEO5unnvF0AejVZHu5DA5XcrdGT1Fxc4WwHaXVw5ZfdxiuFLNV-dC92TUTj-W2cEvzubNjGRNL=w615-h148-no?authuser=0)\n\n## 独自ドメイン設定\n\n- ZEITプロジェクトのドメイン設定ページから [blog.92thunder.dev](http://blog.92thunder.dev) を追加して、表示に従ってTXT, CNAMEレコードを設定するだけだったのでわかりやすくてよかった\n\n## カスタマイズ\n\n- 要らないものを削って色を変更しただけ\n[https://github.com/92thunder/notion-blog/tree/7bd4f164f9aaf07f85c138c433f5f3f4e8c3b59c](https://github.com/92thunder/notion-blog/tree/7bd4f164f9aaf07f85c138c433f5f3f4e8c3b59c)\n    \n![](https://lh3.googleusercontent.com/pw/AM-JKLVEcy8yLMQcoVbhvUBCL493cXPa9IYEKHDSHMsit2dyDsibzdflfcaF0hBe_eUZy0dF1gCWEZacYsiKV7g6x8m6Up_6iPsplZ_IQSQpZ3G7khWEe5qZOtWGujzIK8vK1d-kOWtQWQRgrcR5jvIVBFFq=w725-h289-no?authuser=0)\n    \n- backgorund-color変更など、細かいCSS調整\n    - global.cssの先頭にCSSの変数で色が定義されてるが、それを変えただけでは変わらない部分がある\n    - なぜかh2が小さくなるスタイルがあったので修正\n- トップページ、contactページ、ヘッダーメニュー、フッターのデプロイボタンはとりあえず要らないので削除\n    - Reactﾁｮｯﾄﾃﾞｷﾙくらいでも簡単に変えられるのでNext.jsよさげ\n- 本格的なブログ運用を始めるには最初はかなり頑張りが必要そう。頑張りたくなければはてなブログなどを検討すべき\n\n## 実際にNotionで書いてみて\n\n- Notion使い始めて１週間だが書きごごちは悪くないし使いやすいので投稿の敷居も低くなりそうなのでNotionをヘッドレスCMSとして使えるのは良い\n    - （元々会社では別のドキュメントツール使ってたがNotion派閥が大きくなったので公式ドキュメントツールが先週変わった）\n- 文字の色変更が効かない・Dividerが出ないなどはあるが、Tech Blogだと大きく困ることはなさそう\n    - Notionのblock(?)ごとにswitch-caseで描画している\n    [https://github.com/ijjk/notion-blog/blob/625463ea822f4acf65c79088a34a4eefc7909c4f/src/pages/blog/[slug].tsx#L155-L252](https://github.com/ijjk/notion-blog/blob/625463ea822f4acf65c79088a34a4eefc7909c4f/src/pages/blog/%5Bslug%5D.tsx#L155-L252)\n- Reactのエコシステムを考えればレンダリングのコンポーネントが充実するのはそんなに遠いことではなさそう\n- ブログをどこに書こうか悩んでてReactでメンテできるブログが欲しい、Notionを使いたいなどがマッチしていればNotion Blogはいい選択肢だと思う",
		"published": true,
		"published_at": "2020-02-01 15:00:00"
	},
	{
		"id": "518cd3a1-f4ee-4c2d-8df8-e744a0981bc1",
		"title": "slackにyoutubeのチャンネル登録者数やtwitterのフォロワー数を通知する",
		"body": "趣味のVのやつでslackにyoutubeのチャンネル登録者数とかtwitterのフォロワー数やらを通知するやつを実装したのでメモ。  \n今回はNode.js + AWS Lambda + slack Incoming Webhookを使って実装。AWSアカウントはLambdaでバッチスクリプトを実行させるだけになってきたな…。\n\n# Youtubeのチャンネル登録者数、総再生回数を通知\n\n## APIキー取得\nこちらを参照してAPIキーを取得する  \n\n* https://developers.google.com/youtube/registering_an_application\n\n## slack Incoming webhookからエンドポイントを取得\nここにYoutube, TwitterのAPIから取得した数値をPOSTしてやる  \n参考にしました\n* https://qiita.com/ik-fib/items/b4a502d173a22b3947a0\n\n## チャンネル登録者数を取得しslackに通知\n`GET https://www.googleapis.com/youtube/v3/channels` で取得する  \nドキュメント⇒ https://developers.google.com/youtube/v3/docs/channels/list\n  \nチャンネルの統計情報が欲しかったのでpartには `statistics` を指定\n\n```javascript\nconst request = require('request')\n\nmodule.exports.handler = () => {\n  const options = {\n    method: 'GET',\n    url: 'https://www.googleapis.com/youtube/v3/channels',\n    qs: {\n      part: 'statistics',\n      id: 'XXXXXXXXXXXXXXXXXX',\n      key: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n    } \n  }\n  \n  // 上記設定値でyoutubeからチャンネル登録者数、総再生回数を取得\n  request(options, function (error, response, body) {\n    if (error) throw new Error(error)\n  \n    const data = JSON.parse(body)\n    const subscriberCount = data.items[0].statistics.subscriberCount\n    const viewCount = data.items[0].statistics.viewCount\n    \n    // slackに通知\n    request.post({\n      uri: 'https://hooks.slack.com/services/XXXXXXXXXXXXXXXXXXXX',\n      headers: { 'Content-Type': 'application/json' },\n      json: {\n        text: `チャンネル登録者数: ${subscriberCount}人\\n総再生回数: ${viewCount}回`\n      }\n    }, function(error, response, body) {\n      if (!error && response.statusCode === 200) {\n        console.log(body)\n      } else {\n        console.log('error')\n      }\n    })\n  })\n}\n```\n\nいつも自分はこういう時Postmanから好きな言語のソースコードを出力している。  \nNode.jsだとrequestモジュール使うのがおすすめ  \nhttps://learning.getpostman.com/docs/postman/sending_api_requests/generate_code_snippets/\n\n後はAWS Lambdaの関数として配置して毎日実行されるようにCloud Watch eventをトリガーとして設定すればOK\n\n# Twitterのフォロワー数を通知\n\n## TwitterのAPIキーを取得\n参考にしました\n* https://qiita.com/y_ishihara/items/501bb6fddc785a56780e\n\n## フォロワー数を取得しslackに通知\n楽そうだったのでtwitterのライブラリを使用した  \n`GET /users/show` でTwitterのscreen_nameから情報を取得する  \nhttps://developer.twitter.com/en/docs/accounts-and-users/follow-search-get-users/api-reference/get-users-show.html\n\n```javascript\nconst Twitter = require('twitter')\nconst request = require('request')\n\nmodule.exports.handler = () => {\n    const client = new Twitter({\n        consumer_key: '最近',\n        consumer_secret: '趣味で',\n        access_token_key: 'Vtuber作ってるので',\n        access_token_secret: '動画編集できるようになってきた'\n    })\n\n    const params = { screen_name: 'realDonaldTrump' }\n    client.get('users/show', params, (error, user) => {\n        if (!error) {\n            // slackに通知\n            request.post({\n                uri: 'https://hooks.slack.com/services/XXXXXXXXXXXXXXXXXXXXX',\n                headers: { 'Content-Type': 'application/json' },\n                json: {\n                  text: `${user.name}(${user.screen_name})のフォロワー数は${user.followers_count}人です`\n                }\n              }, function(error, response, body){\n                if (!error && response.statusCode === 200) {\n                  console.log(body)\n                } else {\n                  console.log('error')\n                }\n            })\n        }\n    })\n}\n```\n\n\n",
		"published": false,
		"published_at": "2019-02-10 06:00:00"
	},
	{
		"id": "867101b0-2900-47d5-a7fb-0a0bbc12d14d",
		"title": "Chrome拡張とFirebaseで作るチャットアプリ",
		"body": "We Are JavaScripters! @23rdで発表してきた。\n\n勉強会で発表した資料をブログに貼り付けるのは楽でいいなー\n\nhttps://slides.com/kunisada/deck",
		"published": true,
		"published_at": "2018-08-24 15:00:00"
	},
	{
		"id": "b7c37d0d-6174-4f41-a59f-dde09a83c96f",
		"title": "ホバーしたエレメントにハイライトを当てる",
		"body": "仕事で使いそうだったので素振り\n\nhttps://jsfiddle.net/92thunder/1km9Lt84",
		"published": true,
		"published_at": "2018-06-10 15:00:00"
	},
	{
		"id": "f6ac958c-51b1-4ce9-b023-3f112135bbaa",
		"title": "スタートアップに転職した",
		"body": "4月からスタートアップに転職して1ヶ月が経ったので感じたことなど。\n溜めておくといつまでも書かないので雑に書く。\n\n## 転職した理由\n* スタートアップに挑戦したかったから\n* 人生で一番元気であろう20代を熱中する価値のあるものに注ぎたかったから\n* バイトしていて、やっていけそうな雰囲気だと思ったから\n* SOではなく株貰えたから\n* タイミングよく会社立ち上げ時にジョインできたから\n\n## 転職して\n* 自分のデスクでVue.jsでフロントエンド書いてるだけなので作業自体は転職前とあまり変わらない\n* 年収が下がったが月収が上がった\n* ランチ代が500円以下から1000円くらいになった（お弁当ではなく外に出て食べるようになった）\n* 勤務地が五反田から六本木になった\n* フレックスタイム制から裁量労働制になった\n* 株をもらったので、会社やプロダクトのために仕事するぞという気持ちが強くなった\n* 一人で開発してるとコードの書き方不安になる\n* 残業は増えたがだいたい集中してコード書いてる残業なので良い\n* 疲れてる日とか勉強会がある日は普通に早めに上がれる\n* Web系なんでも担当するぞという気持ちだったが自然とフロントエンド担当っぽくなった\n* リファラル採用で紹介できる知り合いがいない\n* 自分が起業したら、という想像を持ちながら働いていると、採用・営業・ファイナンス・プロダクトの方向性決め・法務・資金調達、などなどやり方の想像すらつかない部分がたくさん見えてきた\n* メルカリさんのおかげで六本木の勉強会に行きやすくなっている\n\n## 転職について\n* 新しいメンバーに慣れるのに時間がかかる\n* 退職金が出ないの辛い（彼女ちゃんも同タイミングで転職したが40万くらいもらっていた）\n* 有休がほとんど残っていなかったので、有休消化期間というのがなかった\n* 気持ちの切り替え期間みたいなのはなかったがすんなり働き始められた\n* ”前職はソニーのグループ会社で働いてまして”が使えるのも今だけなんだろうな\n\n## これから\n* 最高のサービスを早くリリースできるように気合い入れて開発やっていく\n* スタートアップの忙しさに殺されないよう勉強会等で技術キャッチアップを続ける\n* 何かしらの手段で自分自身の価値を上げて行く活動を行う",
		"published": true,
		"published_at": "2018-05-16 15:00:00"
	},
	{
		"id": "6364f3b8-44f6-405f-9a8d-aa44feeebfb0",
		"title": "electron-vueでメモ帳アプリを作ってみた",
		"body": "このエントリーは [#kosen10s Advent Calendar 2017 ](https://adventar.org/calendars/2199)11日目のエントリーです。前日の担当はNKMR6194\nくんで、[なぜpthread_mutexは機能するのか？](https://sakasin.net/blog/pthread-mutex-with-glibc)というエントリーでした。\n\nみんなkosen10sに全く関係無い記事を普通に書いているので自分も普通に今日勉強したことを書く。\nもはやelectronとかvueのアドベントカレンダー向けのエントリになっている。\n\n# Overview\n* [Electron](https://electronjs.org/) で簡単なメモ帳アプリを作った話（未完成）\n* [electron-vue](https://github.com/SimulatedGREG/electron-vue) を使ったよ\n* Vue回りの解説はあんまりしないけど雰囲気で読み取れると思う\n* Electron覚えるとWebのFrontend技術で簡単にデスクトップアプリが作れて雑用力が上がるのでおすすめ\n\n# Electronとは\n> Webサイトを作成する感覚でデスクトップアプリを開発できます。Electron は JavaScript, HTML, CSS といったWeb技術を利用してネイティブアプリケーションを作成するためのフレームワークです。開発者はアプリの重要な部分の実装に集中して、面倒な部分はElectronにお任せください。  [https://electronjs.org/] より\n\nだそうです。技術的にはchromiumを内包したアプリができます。中でNode.jsが動いています。    \nSlackやVisual Studio Codeを始め、がんがん採用実績が増えているフレームワークです。\n\n# 作るもの\n* メモを新規作成できる\n* ファイル保存できる\n* テキストファイルを読み込める\n* macのNotes.appみたいなのを目指す\n\n# electron-vueの導入から起動まで\n```sh\nnpm install -g vue-cli\nvue init simulatedgreg/electron-vue electron-memo\n# 質問されるのでこんな感じで選択した\n> ? Application Name electron-memo\n> ? Project description An electron-vue project\n> ? Select which Vue plugins to install axios, vue-electron, vue-router, vuex\n> ? Use linting with ESLint? Yes\n> ? Which eslint config would you like to use? Standard\n> ? Setup unit testing with Karma + Mocha? Yes\n> ? Setup end-to-end testing with Spectron + Mocha? Yes\n> ? What build tool would you like to use? packager\n\ncd electron-memo\nnpm install\nnpm run dev\n```\nESLintのstandard設定を選択したので生成される.eslintrc.jsを変更しないかぎりはそれに従わないとエラーが発生する。  \nESLintに従ったコーディングをおすすめするが慣れない人は削った方がいい。\n\n起動するとこんなWelcome画面。\n![](https://lh3.googleusercontent.com/pw/AM-JKLWQPVXkA96UP9RxwAFdCJMIpIUC2kBkdSa_S5I007t5n2GI9ivL__DJsYItFRGKTNO7jQeKHbCvIf6ATR5dUm4c8UWeHeTkFSamF1pMefcpZLmLr9G0EJwCdZPng6BA3UM43TuSKlS1-F8CNFnMaFYJ=w1024-h642-no?authuser=0)\nChromiumが動いていて、WebPackDevServerがサーバになっている。ちなみに `http://localhost:9080/` にアクセスすると真っ白な画面になった。うまいこと隠してくれているみたい。  \n`src/main/index.js` を見たところProdビルドではlocalhostURLではなくファイル参照になるようなので安心。\n\n# 最終的にできたもの\n![](https://lh3.googleusercontent.com/pw/AM-JKLWKnanO89NylDZZo5MSsviqsctimpVxu6DGD1xtZ9UGNb6Fp4MmH200fc3T2USjCAFnvNRZZgojDdo7s0TgzpEEtwApVpD-dKa-o1FY5OVu259td_ORQ4uTG96Tc7pxj4RUG4GQ9t1566oe6JrLn0OP=w724-h697-no?authuser=0)\n\n* Slackを参考にしつつデザイン頑張ってみた。\n* まだまだ問題はあるものの３、４時間で形になった\n* まだまだそのうち改善するがとりあえずGithubに置いた（[https://github.com/92thunder/electron-vue-note:title]）\n\n# コード解説等\n#### src/renderer/components/Index.vue を作成\n```html\n<template>\n  <div class=\"grid-container\">\n    <div class=\"sidebar\">\n      <div class=\"memos-title\">Memos</div>\n      <div class=\"memos\">\n        <div v-for=\"(memo, memoIndex) in memos\" :key=\"memoIndex\" @click=\"changeIndex(memoIndex)\"\n              :class=\"['memo', index === memoIndex ? 'active' : '']\">\n          <!-- 保存していればファイル名、保存してなければテキストの１行目、テキストがなければEmptyを表示しておく -->\n          {{ memo.filePath && memo.filePath.split('/').reverse()[0] || memo.text.split('\\n')[0] || \"Empty\" }}\n        </div>\n      </div>\n    </div>\n    <div class=\"action\">\n      <div class=\"action-title\">Action</div>\n      <div @click=\"addNew\" class=\"action-item\">Add New</div>\n      <div @click=\"importMemo\" class=\"action-item\">Import</div>\n    </div>\n    <div class=\"editor\">\n      <!-- keydown.meta.83でcommand+S, ctrl+83でctrl+sを使う。他にもっとうまいやりかたがありそう。 -->\n      <textarea ref=\"editor\" v-model=\"memos[index].text\" placeholder=\"Input free memo.\" class=\"textarea\"\n         @keydown.meta.83=\"save\" @keyup.ctrl.83=\"save\" autofocus></textarea>\n    </div>\n  </div>\n</template>\n\n<script>\n  // remoteを通じてメインプロセスのAPIを呼び出す\n  const {dialog} = require('electron').remote\n  const fs = require('fs')\n\n  const emptyMemo = {'text': '', filePath: ''}\n\n  export default {\n    data: () => {\n      return {\n        memos: [{'text': 'sample memo.', filePath: ''}],\n        index: 0\n      }\n    },\n    methods: {\n      addNew () {\n        this.memos.push(Object.assign({}, emptyMemo))\n        this.changeIndex(this.memos.length - 1)\n      },\n      changeIndex (index) {\n        this.index = index\n        this.$refs.editor.focus()\n      },\n      importMemo () {\n        // dialog.showOpenDialogでOSのファイル選択を呼び出す\n        // 複数ファイルの選択も想定したAPIなので返り値はファイルパスの配列がかえる\n        const filePath = dialog.showOpenDialog({\n          properties: ['openFile', 'createDirectory']\n        })[0]\n        // ファイル読み込みはNode.jsのfsを使って普通に行うことができる\n        fs.readFile(filePath, 'utf8', (error, text) => {\n          if (error) {\n            console.error('error: ', error)\n          } else {\n            this.memos.push({\n              text: text,\n              filePath: filePath\n            })\n            this.changeIndex(this.memos.length - 1)\n          }\n        })\n      },\n      save () {\n        const memo = this.memos[this.index]\n        if (!memo.filePath) {\n          // showSaveDialogでは保存するファイルのパスを選択できる\n          const filePath = dialog.showSaveDialog({title: 'Save as'})\n          memo.filePath = filePath\n        }\n        fs.writeFileSync(memo.filePath, memo.text)\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  /* style scopedと書くことでこのファイル内のみで有効になる */\n  .grid-container {\n    /* ブラウザはChromium限定なので新しいの使ってみようと思い\n       初めてgrid layoutを使って見たが非常に楽だった\n       もうfloatは回り込みとかしたい時だけでよさそう */\n    display: grid;\n    grid-template-columns: 220px 1fr;\n    grid-template-rows: 1fr 100px;\n    grid-template-areas: \"sidebar editor\"\n                         \"action editor\";\n  }\n\n  .sidebar {\n    grid-area: sidebar;\n    background-color: #4863ad;\n    color: #FFFFFF;\n    max-height: calc(100vh - 100px);\n    overflow: auto;\n  }\n\n  .action {\n    grid-area: action;\n    background-color: #4863ad;\n    color: #FFFFFF;\n  }\n\n  .editor {\n    grid-area: editor;\n    height: 100vh;\n  }\n  // 長いので省略\n</style>\n```\n自分的に学びのあった部分はコメントを入れた。\n`<template>`にHTMLを、`<script>`にJSを、`<style>`にCSSを書いていく。  \nさらに`<script>`でexportしているdataにリアクティブにするデータを、methodsにクリックイベント等で呼ぶ関数を書いていく。  \n書くべき場所があるって素晴らしい。    \n\n#### src/renderer/router/index.jsを編集\n```js\n  routes: [\n    {\n      path: '/',\n      name: 'index',\n      component: require('@/components/Index').default\n    },\n    {\n      path: '*',\n      redirect: '/'\n    }\n  ]\n```\n`src/renderer/App.vue` の`<router-view>`にパスに対応したコンポーネントが表示される\n\n# ビルド\nビルドもelectron-vueを使っているおかげでnpmコマンド１つで導入時に選択したelectron-packagerを使ってビルドしてくれているようになっている\n```sh\nnpm run build\n...\nls build/\nelectron-memo-darwin-x64\telectron-memo-linux-x64\t\telectron-memo-mas-x64\t\ticons\n```\nmac, linux用のバイナリが出力された  \nインストーラは出来なかったのでそのうちまた調査する  \nwindowsはエラーが出てビルド出来なかったがwindows用のビルドにはwineが必要らしい  \n__注意！！！ビルドは恐ろしくメモリを食い尽くすようでChromeが落ちる！ビルド前にはブログの途中書きとかがないか確認しよう！！！__\n\n# 感想とか\n* Web技術でデスクトップアプリが作れるようになってしまったので雑用力が向上した\n* このメモ帳はCSSとかで行き詰まったところを除けば３,４時間で作れたので、簡単な社内で使うユーティリティツールなら１日かからず作れてしまいそう\n* 今回は状態の保存すらできず、Vuexを使わなかったがstoreにデータを入れて、それをJSONで保存して、起動時にロードすれば状態の保存がかなり楽になりそうなのでやりたい\n* フロントエンド書いてるのにブラウザがChromium限定なので新しい記法や仕様を思う存分使えそう。ブラウザ別の対応を考えなくていい\n* ピュアelectronを触らずに最初からelectron-vueを使い初めてしまったのでelectronとelectron-vueの恩恵の境界がわかりづらくなってしまった\n* 少なくともelectron-vueを使うことで元からVue.jsを使っていたチームなら爆速でデスクトップアプリ対応出来そう\n\n明日の担当は[tsudukami](https://adventar.org/users/10718)で「教育のお話詰め合わせセット」です。",
		"published": true,
		"published_at": "2017-12-10 15:00:00"
	},
	{
		"id": "d0244ede-c126-4fa8-b7dc-86baaa78b35e",
		"title": "Node.jsでGoogle Analytics APIを使って楽にアクセスランキングを作る",
		"body": "今友人と作ってるやつでアクセスランキングが必要になったので作り方考えたけどDBのアクセス数インクリメントしていったらトータルランキングはできるけど、週間とか月間とかやりたい時どうすんだ？？？ってなって調べてたらGoogle Analyticsにたどり着いた。\nというわけでNode.jsでGoogle Analytics APIを使ってWebページのアクセスランキングを集計してAWS Lambdaで毎日定期実行して更新するようにした記事です。\n\n## Google Analytics APIの設定\n\nこちらを参考にさせて頂きました。ありがとうございます。\n\nGoogle AnalyticsのデータをNode.jsを使って取ってくる(OAuth認証なし) | 株式会社ビヨンド\nサービスアカウントキーの取得やらはこちらを参照されたい。\nどうせGoogleのUIなんてそのうちすぐ新しくなるのでまとめるのめんどい。こういうの最新っぽい記事と直感でなんとかしてるけど英語のドキュメントとかあるんだろうか\n\n## ランキング取得までの流れ\n\nMySQLにarticlesとweekly_rankingテーブルを作っておいてweekly_rankingテーブルを毎日更新してinner joinとかで結合した結果をAPIで返す前提。\n\n1. articles/:idのようなURLでWebページを用意する\n2. MySQLでarticlesテーブルとweekly_rankingテーブルを用意しておく\n3. Google Analytics APIでarticlesをURLに含むデータに対して指定の期間内のアクセスランキングを集計させる\n4. 集計結果Jsonからアクセス先の記事IDを抽出し、weekly_rankingテーブルに書き込む\n5. AWS Lambdaに配置して定期実行するよう設定\n6. APIアクセスでweekly_rankingとarticlesを結合して返す（ビュー作っておいてもいいかもしれない）\n7. Google Analytics APIでアクセスランキング取得してDBに書き込み\n\n## AWS Lambdaの設定\n\nzipに固めてアップロードして毎日定期実行されるよう設定\n\n![](https://lh3.googleusercontent.com/pw/AM-JKLVBMb_2az4Vf-n8eSl_mF9gFli7HkyBWH-L_17rcAh7udjDPmVLzB1LFNkQPd5__mZzD9fSV-Fxmge9QeCybMiAwa6lzpR28EirQQP3b_qdPJNYcRp0v_sKRJ4aWGtC7P3E7zbm4Riksae-ob5LROe6=w820-h792-no?authuser=0)\n後はweekly_rankingのAPIを用意して`SELECT * FROM weekly_ranking INNER JOIN articles ON weekly_ranking.article_id = articles.id ORDER BY rank `で結合して取得するようにした\n\nまずは週間ランキングだけ作った。\n設定値や集計期間を環境変数に逃して日間や月間ランキングもすぐに用意できるようにする予定。\n\n## 近況\n\n内定もらえるやろ！って思ってた状態で一週間ハワイ旅行に行ってる間に選考進んだ２社とも落ちてた。ほぼ転職先決まった報告してしまってたのに恥ずかしい。そういう報告は内定もらってからにしようね。\nCTOさんと面談しまくってはいるがほんとに行きたいと思ったベンチャー企業しか選考に進んでいないので２社しか受けなかった。転職活動はまだ続く",
		"published": true,
		"published_at": "2017-11-22 06:00:00"
	},
	{
		"id": "96ec6cf4-d4db-41b6-a2ce-97a1a0a75d5c",
		"title": "Vue.jsのカスタムコンポーネントでradioボタンを使う",
		"body": "このあたりのサンプルだけだとradioボタン実装するときにどうすればいいかよくわからなくて、親コンポーネントからv-modelでプロパティを与えてる奴があまり見つからなかったので試した\n\nhttps://jp.vuejs.org/v2/guide/components.html#コンポーネントの-v-model-のカスタマイズ\n\nhttps://jsfiddle.net/mani04/3uznmk72/\nからフォークさせて頂きました。",
		"published": true,
		"published_at": "2017-10-14 06:00:00"
	},
	{
		"id": "3f9d8dd4-9df3-4f37-82ed-3a2a9d62f9ce",
		"title": "Vue.jsでDrag＆Dropを試す",
		"body": "Vue.jsでHTML5のドラッグ＆ドロップを試した。\nローカルでの開発は2.4.1, jsfiddleでは2.2.1で動作していることを確認した。\n\n## 導入\n\nここから開発環境用をダウンロードして<script>タグで読み込んだ\n\nhttps://jp.vuejs.org/v2/guide/installation.html#lt-script-gt-直接組み込み\n\n## jsfiddleに貼り付けた\n\nJS長くなった。\n\ninputでエンター押すと新しいアイテムが出てきてそれをドラッグしてグループに移動できるやつ。\n\ntouch対応はしていないのでスマホ未対応。なんか便利なオプションができてそれ指定するとtouchも勝手にできるようにとかなってくれないだろうか。 \n\n## こだわりポイントとか\n* Item, ItemList, Groupがコンポーネントとして使い回せるよう頑張った\n* なぜかVue.jsでdataTransfer使ってドラッグからドロップにデータ渡してるサンプルが出てこなかったのでevent.dataTransferでなるべくデータ渡せるようにした\n* event.dataTransfer.setData(type, data)でデータを格納\n* event.dataTransfer.getData(type)でデータを取得\n* （ドロップ時にitem配列から削除が必要だがそのために配列をかなり上のコンポーネントまで伝搬させて行くのが面倒そうだったので外に保管した）\n\n## 余談\nbackendだけで何か作ってみたとかやっても目に見えにくいからアウトプットしにくいよね\ndrag and dropをDnDと略すのはDo not disturbっぽくてちょっと嫌\n見た目いい感じにしてKPTツールっぽくしようかな\n\n## 参考\n* https://www.html5rocks.com/ja/tutorials/dnd/basics/\n* https://jp.vuejs.org/v2/guide/",
		"published": true,
		"published_at": "2017-09-24 06:00:00"
	},
	{
		"id": "375a8633-1e0d-4bfb-824a-6876d4f8685a",
		"title": "GinでTwitter OAuthでaccess token取得",
		"body": "バズるものを作れる瞬発力を身に付けたくてTwitterのOAuth認証使ってツイートできるやつを作れるようになっておきたかった。アイデアはまだ無い。\nGoのWebアプリケーションフレームワーク Ginを使ってTwitter OAuthでトークン取得するところまで試してみた。\n\n## Ginの採用理由\nさくっと書きたいからsinatra likeなやつを探した。\nその中で現時点でGitHub Starが一番多そうなGinを選んだ。\n\n- https://github.com/go-martini/martini\n- https://github.com/zenazn/goji\n- https://github.com/gin-gonic/gin\n- https://github.com/gocraft/web\n\n## 環境\n前回のgo-twitterを使ってみた記事に引き続きCloud9( http://c9.io )さんを使いました。そろそろ有料プランも検討せねば。\n\nhttp://92thunder.hatenablog.com/entry/2017/09/04/031706\n\n## go getできない\n前回は大丈夫だったがgo getでエラーが発生したのでこちらを参考に解決した。\nhttp://qiita.com/syossan27/items/ad05e5060d2ac0fd7adc\n\n## コード\nmain.go\nGinって標準でsession使えないのか…って思いつつ追加した。\n\nhttps://github.com/gin-gonic/contrib/tree/master/sessions\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/coreos/pkg/flagutil\"\n\tgt \"github.com/dghubble/go-twitter/twitter\"\n\t\"github.com/dghubble/oauth1\"\n\t\"github.com/dghubble/oauth1/twitter\"\n\t\"github.com/gin-gonic/contrib/sessions\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\t// 環境変数からconsumer-key, consumer-secretを取得\n\tflags := flag.NewFlagSet(\"app-auth\", flag.ExitOnError)\n\tconsumerKey := flags.String(\"consumer-key\", \"\", \"Twitter Consumer Key\")\n\tconsumerSecret := flags.String(\"consumer-secret\", \"\", \"Twitter Consumer Secret\")\n\tflags.Parse(os.Args[1:])\n\tflagutil.SetFlagsFromEnv(flags, \"TWITTER\")\n\n\tif *consumerKey == \"\" || *consumerSecret == \"\" {\n\t\tlog.Fatal(\"Consumer key/secret required\")\n\t}\n\n\tconfig := oauth1.Config{\n\t\tConsumerKey:    *consumerKey,\n\t\tConsumerSecret: *consumerSecret,\n\t\tEndpoint:       twitter.AuthorizeEndpoint,\n\t}\n\n\t// ginのrouter初期化\n\trouter := gin.Default()\n\tstore := sessions.NewCookieStore([]byte(\"secret\"))\n\n\t// セッションの設定\n\trouter.Use(sessions.Sessions(\"oauth-tweet-test-session\", store))\n\t// templatesディレクトリを登録\n\trouter.LoadHTMLGlob(\"templates/*\")\n\n\t// GET /\n\t// アクセストークンがセッションに入っていれば表示\n\t// 入ってなければrequestTokenを取得してOAuth認証ページにリダイレクト\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\taccessToken := session.Get(\"access_token\")\n\t\taccessSecret := session.Get(\"access_secret\")\n\t\tif accessToken == nil || accessSecret == nil {\n\t\t\trequestToken, requestSecret, _ := config.RequestToken()\n\t\t\tsession.Set(\"request_secret\", requestSecret)\n\t\t\tsession.Save()\n\t\t\tc.Redirect(http.StatusFound, \"https://api.twitter.com/oauth/authenticate?oauth_token=\"+requestToken)\n\t\t} else {\n\t\t\tc.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n\t\t\t\t\"test\": \"hello world\",\n\t\t\t})\n\t\t}\n\t})\n\n\t// GET /callback\n\t// OAuth認証ページからこのアプリを許可したらリダイレクトされてくる\n\t//  このあたりはTwitter Application Managementで設定\n\t// URLに入っているoauth_token, oauth_verifierと\n\t//  GET /で取得していたrequestSecretを使ってアクセストークン取得\n\trouter.GET(\"/callback\", func(c *gin.Context) {\n\t\toauthToken := c.Query(\"oauth_token\")\n\t\toauthVerifier := c.Query(\"oauth_verifier\")\n\t\tsession := sessions.Default(c)\n\t\trequestSecret := session.Get(\"request_secret\").(string)\n\t\taccessToken, accessSecret, _ := config.AccessToken(oauthToken, requestSecret, oauthVerifier)\n\t\tsession.Set(\"access_token\", accessToken)\n\t\tsession.Set(\"access_secret\", accessSecret)\n\t\tsession.Save()\n\t\tc.Redirect(http.StatusFound, \"/\")\n\t})\n\n\t// POST /post\n\t// access token/secret を使ってツイート投稿する\n\trouter.POST(\"/post\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\taccessToken := session.Get(\"access_token\")\n\t\taccessSecret := session.Get(\"access_secret\")\n\t\tif accessToken == nil || accessSecret == nil {\n\t\t\tlog.Fatal(\"Invalid access token/secret.\")\n\t\t}\n\t\tconfig := oauth1.NewConfig(*consumerKey, *consumerSecret)\n\t\ttoken := oauth1.NewToken(accessToken.(string), accessSecret.(string))\n\t\thttpClient := config.Client(oauth1.NoContext, token)\n\n\t\tclient := gt.NewClient(httpClient)\n\t\tclient.Statuses.Update(\"oauth test\", nil)\n\t\tc.Redirect(http.StatusFound, \"/\")\n\t})\n\n\trouter.Run()\n}\n```\n\ntemplates/index.tmpl\n```html\n<html>\n    <head>\n    </head>\n    <body>\n        <h3>OAuth Tweet Test</h3>\n        <form method=\"post\" action=\"/post\">\n            <button type=\"submit\">Post</button>\n        </form>\n    </body>\n</html>\n```\n\n## 実行\n```shell\nexport TWITTER_CONSUMER_KEY=xxx\nexport TWITTER_CONSUMER_SECRET=xxx\ngo get .\ngo run main.go\n```\n認証ページにリダイレクトされてツイートするとこまでできた。\n\n![](https://lh3.googleusercontent.com/pw/AM-JKLWnluaeGfDliflE3OoIJHYQyfdD3pgjoUz1kUAcnQpAyOe6EbMwEklLuFVBxyejPlOdB3BzyGL2d20RMBZVIFFCex7hR_QTakxY74R1L2WUqX25umMjTGZsNU6IW7RFkuzDOBaDq_XLYxd2QJZGM62f=w719-h332-no?authuser=0)\n\n## 所感\n- さくっとOAuthでトークン取得試せた\n- Mac Bookのスペースキーに何か挟まってるのか打ちにくい",
		"published": true,
		"published_at": "2017-09-10 15:00:00"
	},
	{
		"id": "abbbf61d-83ac-41a1-9815-d6ff22438c24",
		"title": "go-twitterを使ってツイートしてみる",
		"body": "golangの練習がてら、go-twitterを使ってツイートしてみただけ。  \nhttps://github.com/dghubble/go-twitter\n\n## 環境\n今回はCloud9( http://c9.io )を使いました\ntemplateはBlankを選んでWorkspace作成。\n```sh\n$ go version\ngo version go1.8.3 linux/amd64\n```\n最初から入ってる。やったぜ。\nちゃちゃっと試したいときにブラウザ上で試せちゃうのはほんとに便利。\n \n## go get\n```bash\n$ go get github.com/dghubble/go-twitter/twitter\n$ go get github.com/dghubble/oauth1\n```\n\n## コード\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/dghubble/go-twitter/twitter\"\n\t\"github.com/dghubble/oauth1\"\n)\n\nfunc main() {\n\tconfig := oauth1.NewConfig(\"<consumerKey>\", \"<consumerSecret>\")\n        token := oauth1.NewToken(\"<accessToken>\", \"<accessSecret>\")\n\thttpClient := config.Client(oauth1.NoContext, token)\n\n\tclient := twitter.NewClient(httpClient)\n\n\ttweet, resp, err := client.Statuses.Update(\"hello world\", nil)\n\tfmt.Println(tweet)\n\tfmt.Println(resp)\n\tfmt.Println(err)\n}\n```\nドキュメント見た感じclient.Statuses.Updateの第2引数は画像やら位置情報やらつけたい時に使うみたい。\nAPIキーの取得方法は割愛。  \nhttps://dev.twitter.com/ads/tutorials/getting-started\n\n## 実行\nそのまま実行\n```bash\n$ go run main.go\n```\n\nバイナリ化してから実行\n```\n$ go build main.go\n$ ./main\n```\n\nhello \n\n### これから\n連携を許可しますか？みたいな画面が出て代わりにWebサービスが投稿するやつができるとこまではやっておきたい。",
		"published": true,
		"published_at": "2017-09-03 06:00:00"
	},
	{
		"id": "4f9937fd-a056-4f4c-93ec-6545c1a8e8a6",
		"title": "転職怖い",
		"body": "退職エントリとか読んでるとみんなわりとカジュアルに明るく転職してるなとか思ってたんだけど自分がいざやろうかなと考えてみたらとんでもなく怖くなっちゃった話。\n\n### 新卒入社してから\n\n新卒でソフトウェア開発会社に入社して、４ヶ月の研修の後配属されたのでこの８月で丁度２年間実務経験を積んだことになる。業務はWebアプリケーションの開発を中心にプロジェクト３つほど担当してきた。新卒でソフトウェア開発プロジェクトに配属されて第一に身につけるべきだと思ってる「言語やフレームワークについてある程度ちゃんと理解して使う能力」は多分、個人的には、身に付いている、はず。こいつができればキャッチアップ時は気合が必要だが新しいプロジェクトに配属されてもなんとかなる。\n\n## 退職の動機\n\nきっかけは普通のつまらん動機だけど自分は高専卒なのだが、同い年で入ってきた大卒や高専専攻科卒のほうが基本給が高かったからで、それから考え始めて今の成果物型（なんか作ってかかった人月でお金を儲けるやつの名前がちゃんとわかってないのでそう呼んでる）での開発をずっと経験するよりは自社サービスを開発していてB to Cでビジネスやっている会社に行った方が5年後や10年後を想像して、学ぶことが多そうとか将来の選択肢が増えると思ったから。簡単に書くとそんな感じ。\n\n## あれ、転職、怖いぞ？\n\n 夏休みに今の会社に入るまで育ててくれたご両親と相談してOKがもらえたのでこれから本腰入れて転職活動スタートしようかってわけなのですが、転職怖いという壁にぶち当たってしまったわけです。\n\n## 転職の何が怖いのか\n### 1. 成り行きで進んだ人生から変える\n\n中学の時、高専を選んだのは仲良かった友人が高専のこと教えてくれて寮とか楽しそーとかそんな感じだった。（正直適当だったと思う。）\n今の会社を選んだのは正直一番強い理由が高専４年時にインターンに行って悪い会社じゃ無さそうだったという印象があって、他の会社を探す気力も無く、そのまま高専の推薦を使って入社できた。\n\nこの新卒入社までの人生でも選択はいくつかあった。だが転職は違う。今の自分からすると転職は人生というエスカレータから飛び降りるような感覚がある。引っ越しとかその比ではないくらいのエネルギーが必要になりそうだ。\n\n### 2. 自分の武器の少なさ\n\n実務経験２年しかない。就職してからアンテナが折れてしまって新しい技術に触れようとしていない。業務で触れる範囲の技術しか自発的に学習しようとしない。当然OSSに貢献しているわけない。英語できない。メンバーと相談して設計しながらコード書くことはできるけど自分一人でちゃんとしたものを作ったことがないので自信がない。。。\nなどなど、武器を探すつもりが悪いところしか見つからない。プロジェクト内では若手エースのつもりになっていた自分を恥ずかしく思う。\nこんな状態で本当に転職活動できるのだろうか・・・\n\n### 3. 転職しないという選択肢 \n\n収入は23歳の若造にしてはわりといいほうだと思う。大企業のグループ会社の利点だ。彼女も居て既に同棲している。正直言ってめっちゃいい感じの人生だと思う。転職しなければあと数年しない内に家庭を持ってたりしているかもしれない。\n転職すると、この先の人生がめっちゃいい感じのままでいられる可能性は大きく下がると思う。転職した結果、激務すぎて鬱になったり収入が低すぎたり彼女と別れたりするかもしれない。転職しないほうが安定したいわゆる幸せな生活が手に入るだろう。\n\n## まとめ\n\nというわけでいざ自分が転職しようと思ったらすごい怖いと思った話でした。頭良さそうな人の終身雇用前提はクソとか過労死とかになる前に仕事やめろよみたいな意見に賛成してたけどいざやろうと思うと壁が多いもんだなと思う。\nまあ最初に書いた通り5年後10年後の自分の幅と経験値のために転職するんだけど。\nブログ書く前は漠然と「うわ！なんか転職こわい！」と思ってたんですが書くと整理できてすっきりしました。\n\nというわけで初エントリでした。今後もこのブログではプログラミングのことや備忘録やら雑記やらなんでも書きたいと思ってます。",
		"published": true,
		"published_at": "2017-08-23 21:00:00"
	}
]